// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement()) // 필드명 자료형 식별자 옵션
  phone           String?    @unique
  email           String     @unique
  username        String
  password        String
  avatarUrl       String?
  created         DateTime   @default(now()) // now() : 해당 시점의 날짜를 가져옴.
  updated         DateTime   @updatedAt
  product         Product[]
  post            Post[]
  replies         Replies[]
  interest        Interest[]
  writtenReviews  Review[]   @relation(name: "writtenReviews")
  receivedReviews Review[]   @relation(name: "receivedReviews")
  record          Record[]
  sentMessage     Message[]  @relation(name: "sentMessage")
  receivedMessage Message[]  @relation(name: "receivedMessage")
}

model Product {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String?  @db.Text
  name        String
  option      String   @default("None")
  price       Int
  description String?  @db.Text
  isSoldOut   Boolean  @default(false)
  record      Record[]
  reviews     Review[]

  @@index([userId])
}

model Post {
  id          Int        @id @default(autoincrement())
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  title       String     @db.Text
  description String     @db.MediumText
  tag         String
  replies     Replies[]
  interest    Interest[]

  @@index([userId])
}

model Replies {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  text    String   @db.MediumText
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}

model Interest {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}

model Review {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  text        String   @db.MediumText
  star        Int
  createdBy   User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdTo   User     @relation(name: "receivedReviews", fields: [createdToId], references: [id], onDelete: Cascade)
  createdToId Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int

  @@index([createdById, createdToId, productId])
}

enum Kind {
  Like
  Buy
  Sell
}

model Record {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind

  @@index([userId, productId])
}

model Message {
  id           Int      @id @default(autoincrement())
  created      DateTime @default(now())
  updated      DateTime @updatedAt
  text         String   @db.MediumText
  messagedBy   User     @relation(name: "sentMessage", fields: [messagedById], references: [id], onDelete: Cascade)
  messagedById Int
  messagedTo   User     @relation(name: "receivedMessage", fields: [messagedToId], references: [id], onDelete: Cascade)
  messagedToId Int

  @@index([messagedById, messagedToId])
}
