// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int        @id @default(autoincrement()) // 필드명 자료형 식별자 옵션
  phone           String?    @unique
  email           String     @unique
  username        String
  password        String
  avatarUrl       String?
  created         DateTime   @default(now()) // now() : 해당 시점의 날짜를 가져옴.
  updated         DateTime   @updatedAt
  product         Product[]
  post            Post[]
  replies         Replies[]
  interest        Interest[]
  writtenReviews  Review[]   @relation(name: "writtenReviews")
  receivedReviews Review[]   @relation(name: "receivedReviews")
  record          Record[]
}

model Product {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String   @db.Text
  name        String
  price       Int
  description String?  @db.Text
  isSoldOut   Boolean  @default(false)
  record      Record[]
}

model Post {
  id          Int        @id @default(autoincrement())
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  title       String     @db.Text
  description String     @db.MediumText
  replies     Replies[]
  interest    Interest[]
}

model Replies {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  text    String   @db.MediumText
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
}

model Interest {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
}
enum Kind {
  Like
  Buy
  Sell
}

model Record {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
}
